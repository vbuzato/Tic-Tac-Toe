{"version":3,"sources":["components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Board","this","props","board","play","resetGame","className","map","_","index","option","choice","choose","console","log","e","onClick","key","id","React","Component","App","bind","verifyBoard","endGame","state","player","alert","i","setState","nextPlayer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA4BeA,E,uKAzBH,IAAD,EAC4BC,KAAKC,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,KAAMC,EADd,EACcA,UACrB,OACE,yBAAKC,UAAU,SACZH,EAAMI,KAAI,SAACC,EAAGC,GACb,IAAIC,EAAQC,EAAQC,EAAS,GAQ7B,MAPqB,MAAjBT,EAAMM,IACRE,EAASR,EAAMM,GACfC,EAAS,WACTE,EAAS,WAAOC,QAAQC,IAAI,iBAE5BF,EAAS,SAACG,EAAGN,GAAJ,OAAcL,EAAKW,EAAGN,IAG/B,yBAAKO,QAAS,SAACD,GAAD,OAAOH,EAAOG,EAAGN,IAAQQ,IAAG,UAAKR,GAAUS,GAAE,UAAKT,GAASH,UAAS,iBAAYG,EAAZ,YAAqBC,IACrG,0BAAMJ,UAAU,aAAaK,OAInC,4BAAQK,QAASX,GAAjB,mB,GApBYc,IAAMC,WC+DXC,G,wDA5Db,aAAe,IAAD,8BACZ,gBACKjB,KAAO,EAAKA,KAAKkB,KAAV,gBACZ,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKjB,UAAY,EAAKA,UAAUiB,KAAf,gBACjB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAEf,EAAKG,MAAQ,CACXtB,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChDuB,OAAQ,KATE,E,sDAaH,IACDA,EAAWzB,KAAKwB,MAAhBC,OACRC,MAAM,WAAD,OAAYD,EAAZ,UACLzB,KAAKI,c,oCAKL,IAFa,IACLF,EAAUF,KAAKwB,MAAftB,MACCyB,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACT,MAAbzB,EAAMyB,IAAczB,EAAMyB,KAAOzB,EAAMyB,EAAI,IAAMzB,EAAMyB,KAAOzB,EAAMyB,EAAI,IAAI3B,KAAKuB,UAEvF,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACT,MAAbzB,EAAMyB,IAAczB,EAAMyB,KAAOzB,EAAMyB,EAAI,IAAMzB,EAAMyB,KAAOzB,EAAMyB,EAAI,IAAI3B,KAAKuB,UAEtE,MAAbrB,EAAM,IAAcA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAIF,KAAKuB,UAC5D,MAAbrB,EAAM,IAAcA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAIF,KAAKuB,Y,kCAI7EvB,KAAK4B,SAAS,CACZ1B,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChDuB,OAAQ,Q,2BAIPX,EAAGN,GAAQ,IAAD,EACaR,KAAKwB,MAAvBtB,EADK,EACLA,MAAOuB,EADF,EACEA,OACfvB,EAAMM,GAASiB,EACf,IAAMI,EAAyB,MAAXJ,EAAkB,IAAM,IAC5CzB,KAAK4B,SAAS,CAAE1B,MAAOA,EAAOuB,OAAQI,IACtC7B,KAAKsB,gB,+BAGG,IACApB,EAAUF,KAAKwB,MAAftB,MACR,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,CACEH,MAAOA,EACPC,KAAMH,KAAKG,KACXC,UAAWJ,KAAKI,iB,GAtDRc,IAAMC,YCQJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.17d5a113.chunk.js","sourcesContent":["import React from 'react';\n\nclass Board extends React.Component {\n  render() {\n    const { board, play, resetGame } = this.props;\n    return (\n      <div className=\"board\">\n        {board.map((_, index,) => {\n          let option, choice, choose = '';\n          if (board[index] !== 'E') {\n            choice = board[index];\n            option = 'inactive';\n            choose = () => {console.log('not allowed')};\n          } else {\n            choose = (e, index) => play(e, index);\n          }\n          return (\n            <div onClick={(e) => choose(e, index)} key={`${index}`}  id={`${index}`} className={`box pos${index} ${option}`}>\n              <span className=\"bt-choice\">{choice}</span>\n            </div>\n          )}\n        )}\n        <button onClick={resetGame}>Reset game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.play = this.play.bind(this);\n    this.verifyBoard = this.verifyBoard.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.endGame = this.endGame.bind(this);\n\n    this.state = {\n      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'],\n      player: 'X',\n    }\n  }\n\n  endGame() {\n    const { player } = this.state;\n    alert(`Player: ${player} wins`)\n    this.resetGame();\n  }\n  \n  verifyBoard() {\n    const { board } = this.state;\n    for (let i = 0; i < 9; i += 3) {\n      if (board[i] !== 'E' && board[i] === board[i + 1] && board[i] === board[i + 2]) this.endGame();\n    }\n    for (let i = 0; i < 9; i += 1) {\n      if (board[i] !== 'E' && board[i] === board[i + 3] && board[i] === board[i + 6]) this.endGame();\n    }\n    if (board[0] !== 'E' && board[0] === board[4] && board[0] === board[8]) this.endGame();\n    if (board[2] !== 'E' && board[2] === board[4] && board[2] === board[6]) this.endGame();\n  }\n\n  resetGame() {\n    this.setState({\n      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'],\n      player: 'X'\n    });\n  }\n\n  play(e, index) {\n    const { board, player } = this.state;\n    board[index] = player;\n    const nextPlayer = (player === 'X') ? 'O' : 'X';\n    this.setState({ board: board, player: nextPlayer });\n    this.verifyBoard();\n  }\n\n  render() {\n    const { board } = this.state;\n    return (\n      <div className=\"App\">\n        <Board\n          board={board}\n          play={this.play}\n          resetGame={this.resetGame}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}